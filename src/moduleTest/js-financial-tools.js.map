{"version":3,"file":"js-financial-tools.js","sources":["../src/calc/number.ts","../src/util/acquire.ts","../src/display/formatter.ts","../src/index.ts"],"sourcesContent":["function isRealNumber(num: any): boolean {\r\n  return typeof num === \"number\" && !isNaN(num);\r\n}\r\n\r\nfunction float(\r\n  num: number,\r\n  precision: number,\r\n  placeholder: string = \"--\"\r\n): string {\r\n  const accuracy = isRealNumber(precision) ? precision : 2; // default digit\r\n  if (!isRealNumber(num)) {\r\n    return placeholder;\r\n  }\r\n  return num.toFixed(accuracy);\r\n}\r\n\r\nfunction percentage(\r\n  num: number,\r\n  precision: number,\r\n  placeholder: string = \"--\"\r\n): string {\r\n  const accuracy = isRealNumber(precision) ? precision : 2;\r\n  if (!isRealNumber(num)) {\r\n    return placeholder;\r\n  }\r\n  return `${(num * 100).toFixed(accuracy)}%`;\r\n}\r\n\r\nexport { isRealNumber, float, percentage };\r\n","import { isRealNumber } from \"@/calc/number\";\r\n\r\nimport {\r\n  getDateTime,\r\n  wholeQuarterRangeMap,\r\n  wholeYearRangeArr,\r\n} from \"./constant\";\r\n\r\ntype DateRange = [number, number];\r\ntype DateStrRange = [string, string] | [];\r\n\r\nfunction getIntPartLength(num: number): number {\r\n  return Math.floor(Math.log10(Math.abs(num))) + 1;\r\n}\r\n\r\nfunction getMonetaryUnit(val: number) {\r\n  if (isRealNumber(val)) {\r\n    const intPartLength = getIntPartLength(val);\r\n    if (intPartLength > 8) {\r\n      return \"亿\";\r\n    }\r\n    if (intPartLength > 4) {\r\n      return \"万\";\r\n    }\r\n    return \"\";\r\n  }\r\n  return \"\";\r\n}\r\n\r\n/**\r\n *\r\n * @param {Array} dateArr\r\n * case1: dateArr = [\"2022-01-01\", \"2019-10-12\", \"2018-05-18\"];\r\n * @returns maxDateStr\r\n * case1 result: \"2022-01-01\"\r\n */\r\nfunction getMaxDate(dateArr: string[]): string {\r\n  const timestampArr = dateArr.map((item) => getDateTime(item));\r\n  const maxTimestamp = Math.max(...timestampArr);\r\n  const maxTimeIndex = timestampArr.indexOf(maxTimestamp);\r\n  return dateArr[maxTimeIndex];\r\n}\r\n\r\nfunction getMinDate(dateArr: string[]): string {\r\n  const timestampArr = dateArr.map((item) => getDateTime(item));\r\n  const minTimestamp = Math.min(...timestampArr);\r\n  const minTimeIndex = timestampArr.indexOf(minTimestamp);\r\n  return dateArr[minTimeIndex];\r\n}\r\n\r\n/**\r\n * @param {[startTimestamp1, endTimestamp1]} range1\r\n * @param {[startTimestamp2, endTimestamp2]} range2\r\n *\r\n * @returns [startTimestamp, endTimeStamp] || []\r\n */\r\nfunction getTimeRangeIntersection(\r\n  range1: DateRange,\r\n  range2: DateRange\r\n): number[] {\r\n  const [startTimestamp1, endTimestamp1] = range1;\r\n  const [startTimestamp2, endTimestamp2] = range2;\r\n  const startTimestamp = Math.max(startTimestamp1, startTimestamp2);\r\n  const endTimestamp = Math.min(endTimestamp1, endTimestamp2);\r\n  if (startTimestamp < endTimestamp) {\r\n    return [startTimestamp, endTimestamp];\r\n  }\r\n  return [];\r\n}\r\n\r\n/**\r\n *\r\n * @param {String|Number} year\r\n * case1: \"2020\"\r\n * @param {String} quarter\r\n * case1: \"Q1\"\r\n * @param {Array} dateRange = [startDate, endDate]\r\n * case1: [\"2020-01-01\", \"2021-11-11\"]\r\n *\r\n * @returns Boolean\r\n */\r\nfunction checkQuarterInRange(\r\n  year: string | number,\r\n  quarter: string,\r\n  dateRange: DateStrRange\r\n): boolean {\r\n  if (dateRange.length === 0) {\r\n    return false;\r\n  }\r\n  const [startDate, endDate] = dateRange;\r\n  const startTimeStamp = getDateTime(startDate);\r\n  const endTimeStamp = getDateTime(endDate);\r\n  const quarterStartDate = `${year}-${wholeQuarterRangeMap[quarter][0]}`;\r\n  const quarterEndDate = `${year}-${wholeQuarterRangeMap[quarter][1]}`;\r\n  const quarterStartTimeStamp = getDateTime(quarterStartDate);\r\n  const quarterEndTimeStamp = getDateTime(quarterEndDate);\r\n  if (\r\n    quarterStartTimeStamp >= startTimeStamp &&\r\n    quarterStartTimeStamp <= endTimeStamp &&\r\n    quarterEndTimeStamp >= startTimeStamp &&\r\n    quarterEndTimeStamp <= endTimeStamp\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction checkYearInRange(\r\n  year: string | number,\r\n  dateRange: DateStrRange\r\n): boolean {\r\n  if (dateRange.length === 0) {\r\n    return false;\r\n  }\r\n  const [startDate, endDate] = dateRange;\r\n  const startTimeStamp = getDateTime(startDate);\r\n  const endTimeStamp = getDateTime(endDate);\r\n  const yearStartDate = `${year}-${wholeYearRangeArr[0]}`;\r\n  const yearEndDate = `${year}-${wholeYearRangeArr[1]}`;\r\n  const yearStartTimeStamp = getDateTime(yearStartDate);\r\n  const yearEndTimeStamp = getDateTime(yearEndDate);\r\n  if (\r\n    yearStartTimeStamp >= startTimeStamp &&\r\n    yearStartTimeStamp <= endTimeStamp &&\r\n    yearEndTimeStamp >= startTimeStamp &&\r\n    yearEndTimeStamp <= endTimeStamp\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Create a full quarter array that includes the dateRange\r\n *\r\n * @param {Array} dateRange = [startDate, endDate]\r\n * @returns [\"2019Q1\", \"2019Q2\", \"2019Q3\", \"2019Q4\", \"2020Q1\"]\r\n */\r\nfunction createQuarterArr(dateRange: DateStrRange): string[] {\r\n  const quarterArr: string[] = [];\r\n  if (dateRange.length === 0) {\r\n    return quarterArr;\r\n  }\r\n  const [startDate, endDate] = dateRange;\r\n  const yearArr = []; // [\"2019\", \"2020\", ...]\r\n  const startYear = startDate.split(\"-\")[0];\r\n  const endYear = endDate.split(\"-\")[0];\r\n  for (let i = parseInt(startYear, 10); i <= parseInt(endYear, 10); i++) {\r\n    yearArr.push(i.toString());\r\n    const fullQuarter = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"];\r\n    fullQuarter.forEach((item) => {\r\n      if (checkQuarterInRange(i, item, dateRange)) {\r\n        const quarterStr = `${i}${item}`;\r\n        quarterArr.push(quarterStr);\r\n      }\r\n    });\r\n  }\r\n  return quarterArr;\r\n}\r\n\r\nexport {\r\n  getIntPartLength,\r\n  getMonetaryUnit,\r\n  getMaxDate,\r\n  getMinDate,\r\n  getTimeRangeIntersection,\r\n  checkQuarterInRange,\r\n  checkYearInRange,\r\n  createQuarterArr,\r\n};\r\n","import { isRealNumber, float, percentage } from \"@/calc/number\";\r\n\r\nimport { getIntPartLength } from \"@/util/acquire\";\r\n\r\nfunction formatRank(val: number | undefined): string {\r\n  if (!isRealNumber(val)) {\r\n    return \"--\";\r\n  }\r\n  return `No.${val}`;\r\n}\r\n\r\nfunction formatLongText(val: string | undefined, limit: number): string {\r\n  if (!val) {\r\n    return \"--\";\r\n  }\r\n  if (val.length > limit) {\r\n    return `${val.slice(0, limit)}...`;\r\n  }\r\n  return val;\r\n}\r\n\r\nfunction formatWithUnit(\r\n  val: number | undefined,\r\n  unitStr: string = \"\",\r\n  precision: number = 2\r\n): string {\r\n  if (!isRealNumber(val)) {\r\n    return \"--\";\r\n  }\r\n  let numStr: string;\r\n  switch (unitStr) {\r\n    case \"万\":\r\n      numStr = float((val as number) / 10 ** 4, precision);\r\n      break;\r\n    case \"亿\":\r\n      numStr = float((val as number) / 10 ** 8, precision);\r\n      break;\r\n    default:\r\n      numStr = String(val);\r\n      break;\r\n  }\r\n  return `${numStr}${unitStr}`;\r\n}\r\n\r\nfunction formatToMonetaryShape(\r\n  val: number | undefined,\r\n  precision: number = 2\r\n): string {\r\n  if (!isRealNumber(val)) {\r\n    return \"--\";\r\n  }\r\n  const intPartLength = getIntPartLength(val as number);\r\n  if (intPartLength > 8) {\r\n    const num = (val as number) / 10 ** 8;\r\n    return `${float(num, precision)}亿`;\r\n  }\r\n  if (intPartLength > 4) {\r\n    const num = (val as number) / 10 ** 4;\r\n    return `${float(num, precision)}万`;\r\n  }\r\n  return `${float(val as number, precision)}`;\r\n}\r\n\r\nfunction formatToFloat(\r\n  val: number | undefined,\r\n  plusSign: string = \"\",\r\n  precision: number = 2,\r\n  scale: number = 1\r\n): string {\r\n  if (!isRealNumber(val)) {\r\n    return \"--\";\r\n  }\r\n  const num: number = (val as number) / scale;\r\n  if (num > 0) {\r\n    return `${plusSign}${float(num, precision)}`;\r\n  }\r\n  return float(num, precision);\r\n}\r\n\r\nfunction formatToPercent(\r\n  val: number | undefined,\r\n  plusSign: string = \"\",\r\n  precision: number = 2,\r\n  scale: number = 1\r\n): string {\r\n  if (!isRealNumber(val)) {\r\n    return \"--\";\r\n  }\r\n  const num = (val as number) / scale;\r\n  if (num > 0) {\r\n    return `${plusSign}${percentage(num, precision)}`;\r\n  }\r\n  return percentage(num, precision);\r\n}\r\n\r\nexport {\r\n  formatRank,\r\n  formatLongText,\r\n  formatWithUnit,\r\n  formatToMonetaryShape,\r\n  formatToFloat,\r\n  formatToPercent,\r\n};\r\n","// import * as calc from \"./calc\";\r\nimport * as display from \"./display\";\r\n// import * as util from \"./util\";\r\n\r\nexport default {\r\n  // ...calc,\r\n  ...display,\r\n  // ...util\r\n}"],"names":[],"mappings":"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"}